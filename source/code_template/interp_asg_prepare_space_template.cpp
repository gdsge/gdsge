double GDSGE_ASG_CELL[(ASG_MAX_LEVEL+2)*ASG_MAX_DIM] = {0};
double GDSGE_ASG_RATIO[(ASG_MAX_LEVEL+2)*ASG_MAX_DIM] = {0};
double GDSGE_ASG_SLOPE[(ASG_MAX_LEVEL+2)*ASG_MAX_DIM] = {0};
adouble GDSGE_INTERP_RSLT_adouble[ASG_MAX_NVEC] = {0};
double GDSGE_INTERP_RSLT_double[ASG_MAX_NVEC] = {0};
double GDSGE_INTERP_GRAD[ASG_MAX_NVEC*ASG_MAX_DIM] = {0};
bool INTERP_VEC_FLAG[ASG_MAX_NVEC] = {false};


// Vector evaluation
auto GDSGE_INTERP_VEC_adouble = [&GDSGE_CPP_ASG,&GDSGE_ASG_CELL,&GDSGE_ASG_RATIO,&GDSGE_ASG_SLOPE,&GDSGE_INTERP_RSLT_adouble,&GDSGE_INTERP_GRAD,&GDSGE_EVAL_GRAD_FLAG](int shockIdx, ADOUBLE_VAR_NAME)
{
  adouble xSite[] = {VAR_NAME};
  GDSGE_CPP_ASG.eval_vec_adouble(shockIdx-1, xSite, GDSGE_ASG_CELL, GDSGE_ASG_RATIO, GDSGE_ASG_SLOPE,
	  GDSGE_INTERP_RSLT_adouble, GDSGE_INTERP_GRAD, GDSGE_EVAL_GRAD_FLAG);
};

auto GDSGE_INTERP_VEC_double = [&GDSGE_CPP_ASG,&GDSGE_ASG_CELL,&GDSGE_ASG_RATIO,&GDSGE_ASG_SLOPE,&GDSGE_INTERP_RSLT_double](int shockIdx, DOUBLE_VAR_NAME)
{
  double xSite[] = {VAR_NAME};
  GDSGE_CPP_ASG.eval_vec(shockIdx-1, xSite, GDSGE_ASG_CELL, GDSGE_ASG_RATIO, GDSGE_ASG_SLOPE,
	  GDSGE_INTERP_RSLT_double);
};

auto GDSGE_INTERP_ARRAY_adouble = [&GDSGE_CPP_ASG,&GDSGE_ASG_CELL,&GDSGE_ASG_RATIO,&GDSGE_ASG_SLOPE,&GDSGE_INTERP_RSLT_adouble,&GDSGE_INTERP_GRAD,&GDSGE_EVAL_GRAD_FLAG](int shockIdx, adouble* xSite)
{
  GDSGE_CPP_ASG.eval_vec_adouble(shockIdx-1, xSite, GDSGE_ASG_CELL, GDSGE_ASG_RATIO, GDSGE_ASG_SLOPE,
	  GDSGE_INTERP_RSLT_adouble, GDSGE_INTERP_GRAD, GDSGE_EVAL_GRAD_FLAG);
  return GDSGE_INTERP_RSLT_adouble[0];
};

auto GDSGE_INTERP_ARRAY_double = [&GDSGE_CPP_ASG,&GDSGE_ASG_CELL,&GDSGE_ASG_RATIO,&GDSGE_ASG_SLOPE,&GDSGE_INTERP_RSLT_double](int shockIdx, double* xSite)
{
  GDSGE_CPP_ASG.eval_vec(shockIdx-1, xSite, GDSGE_ASG_CELL, GDSGE_ASG_RATIO, GDSGE_ASG_SLOPE,
	  GDSGE_INTERP_RSLT_double);
  return GDSGE_INTERP_RSLT_double[0];
};
